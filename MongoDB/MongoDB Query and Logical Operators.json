db.billingcycles.insert({
	name: "Março/17",
	month: 3,
	year: 2017,
	credits: [
		{name: "Salário", value: 5000}
	],
	debts: [
		{name: "Luz", value: 100, status: "PAGO"},
		{name: "Telefone" , value: 100, status: "PENDENTE"}
	]
})

db.billingcycles.insert({
	name: "Abril/17",
	month: 4,
	year: 2017,
	credits: [
		{name: "Salário", value: 5000}
	],
	debts: [
		{name: "Luz", value: 100, status: "PAGO"},
		{name: "Telefone" , value: 100, status: "PENDENTE"}
	]
})

//Encontrar por 2 critérios
db.billingcycles.find( { $or: [ { month: 3 }, { month: 4 } ] } ).pretty()

//Return the last query with a better solution
db.billingcycles.find( { month: { $in: [3, 4] } } ).pretty()

//Encontrar e printar com filtro em existência.
//Change to findOne to find just the first one
db.billingcycles.find({credits: {$exists: true}}).pretty()

//Encontrar por determinado critério, de forma clara,
//pulando o primeiro e retornando somente 1.
db.billingcycles.find({year: 2017}).pretty().skip(1).limit(1)

//Agregação onde project é o que quero tratar
//Group onde quero agrupar esses dados
db.billingcycles.aggregate([{
	$project: { 
		credit: {$sum: "$credits.value"},
		debt: {$sum: "$debts.value"}}
	},
	{ 
	$group: {
		_id: null,
		credit:{$sum: "$credit"},
		debt:{$sum: "$debt"}
	}
}])

//Atualização de dados com determinados critérios
db.billingcycles.update(
	{$and: [
		{month: 1},
		{ year: 2017}]},
	{$set:
		{credits: [
			{name: "Salário", value: 5000}
		]
	}
})

//Retornando filtro de acordo com existência de atributo.
db.billingcycles.find(
	{credits: {$exists: true}},
	{_id: 0, name: 1}
).pretty()

//Contar registros
db.billingcycles.count()

//Remover registro com mês 2
db.billingcycles.remove({ month: 2})

//Excluir apenas um registro do critério
db.billingcycles.remove( {year: 2017}, 1)

db.dropDatabase()